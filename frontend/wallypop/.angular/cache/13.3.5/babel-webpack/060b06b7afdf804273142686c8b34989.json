{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BASE_URL = '/api/';\nexport let ReportService = /*#__PURE__*/(() => {\n  class ReportService {\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router;\n    }\n\n    getReports() {\n      return this.httpClient.get(BASE_URL + \"admin/reports\").pipe(catchError(error => this.handleError(error)));\n    }\n\n    getReport(id) {\n      return this.httpClient.get(BASE_URL + \"admin/reports/\" + id).pipe(catchError(error => this.handleError(error)));\n    }\n\n    deleteReport(report) {\n      return this.httpClient.delete(BASE_URL + \"admin/reports/\" + report.id_REPORT + \"/rejectReport\").pipe(catchError(error => this.handleError(error)));\n    }\n\n    aceptReport(report) {\n      return this.httpClient.delete(BASE_URL + \"admin/reports/\" + report.id_REPORT + \"/aceptReport\").pipe(catchError(error => this.handleError(error)));\n    }\n\n    proof(report) {\n      return this.httpClient.get(BASE_URL + \"admin/reports/\" + report.id_REPORT + \"/proof\").pipe(catchError(error => this.handleError(error)));\n    }\n\n    addReport(email, description, id) {\n      return this.httpClient.post(BASE_URL + \"reports/\" + id, {\n        email,\n        description\n      }).pipe(catchError(error => this.handleError(error)));\n    }\n\n    createForm(article) {\n      return this.httpClient.post(BASE_URL + \"reports/\" + article.id_ARTICLE, article);\n    }\n\n    setReportProof(report, formData) {\n      console.log(formData);\n      return this.httpClient.post(BASE_URL + 'reports/' + report.id_REPORT + '/image', {\n        formData\n      }).pipe(catchError(error => this.handleError(error)));\n    }\n\n    handleError(error) {\n      console.log('ERROR:');\n      console.error(error);\n      return throwError('Server error (' + error.status + '): ' + error.text());\n    }\n\n  }\n\n  ReportService.ɵfac = function ReportService_Factory(t) {\n    return new (t || ReportService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  ReportService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReportService,\n    factory: ReportService.ɵfac,\n    providedIn: 'root'\n  });\n  return ReportService;\n})();","map":null,"metadata":{},"sourceType":"module"}