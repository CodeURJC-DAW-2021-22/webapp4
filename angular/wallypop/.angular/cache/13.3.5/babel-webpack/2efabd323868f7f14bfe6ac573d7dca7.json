{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BASE_URL = '/api/';\nexport let ArticleService = /*#__PURE__*/(() => {\n  class ArticleService {\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router;\n    }\n\n    getArticles() {\n      return this.httpClient.get(BASE_URL + 'articles').pipe(catchError(error => this.handleError(error)));\n    }\n\n    getArticle(id) {\n      return this.httpClient.get(BASE_URL + 'articles/' + id).pipe(catchError(error => this.handleError(error)));\n    }\n\n    getUserArticle(id) {\n      return this.httpClient.get(BASE_URL + 'articles/user/' + id).pipe(catchError(error => this.handleError(error)));\n    } // tslint:disable-next-line:variable-name\n\n\n    addArticle(TITLE, DESCRIPTION, CITY, p, POSTAL_CODE, categories) {\n      // tslint:disable-next-line:max-line-length\n      const PRICE = Number.parseFloat(p);\n      return this.httpClient.post(BASE_URL + 'articles', {\n        TITLE,\n        DESCRIPTION,\n        CITY,\n        PRICE,\n        POSTAL_CODE,\n        categories\n      }, {\n        withCredentials: true\n      });\n    }\n\n    setArticleImage(article, formData) {\n      return this.httpClient.post(BASE_URL + 'articles/' + article.id_ARTICLE + '/image', formData).pipe(catchError(error => this.handleError(error)));\n    }\n\n    deleteArticleImage(article) {\n      return this.httpClient.delete(BASE_URL + article.id_ARTICLE + '/image').pipe(catchError(error => this.handleError(error)));\n    }\n\n    deleteArticle(article) {\n      return this.httpClient.delete(BASE_URL + 'articles/' + article.id_ARTICLE).pipe(catchError(error => this.handleError(error)));\n    }\n\n    updateArticle(article) {\n      return this.httpClient.put(BASE_URL + article.id_ARTICLE, article).pipe(catchError(error => this.handleError(error)));\n    }\n    /*\r\n        getCategoriesArticle(article: Article): Observable<Category[]> {\r\n            return this.httpClient.get(BASE_URL + article.categories).pipe(\r\n                catchError(error => CategoryService.handleError(error))\r\n            ) as Observable<Category[]>;\r\n        } */\n\n\n    handleError(error) {\n      console.log('ERROR:');\n      console.error(error);\n      return throwError('Server error (' + error.status + '): ' + error.text());\n    }\n\n    getFilteredArticles(query, city) {\n      return this.httpClient.get(BASE_URL + 'articles/search?query=' + query + '&city=' + city).pipe(catchError(error => this.handleError(error)));\n    }\n\n    sendEmail(message, from, articleId) {\n      this.httpClient.post(BASE_URL + 'mail/' + from + '/' + articleId, {\n        message\n      }, {\n        withCredentials: true\n      }).subscribe(response => this.router.navigate(['/post/' + articleId], {\n        queryParams: {\n          e: 1\n        }\n      }), error => this.router.navigate(['/post/' + articleId], {\n        queryParams: {\n          e: 0\n        }\n      }));\n    }\n\n    reserve(idArticle) {\n      this.httpClient.post(BASE_URL + 'articles/' + idArticle + '/reserve', null).subscribe(response => location.reload(), error => console.log(error));\n    }\n\n    sell(idArticle) {\n      this.httpClient.post(BASE_URL + 'articles/' + idArticle + '/sell', null).subscribe(response => location.reload(), error => console.log(error));\n    }\n\n  }\n\n  ArticleService.ɵfac = function ArticleService_Factory(t) {\n    return new (t || ArticleService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  ArticleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ArticleService,\n    factory: ArticleService.ɵfac,\n    providedIn: 'root'\n  });\n  return ArticleService;\n})();","map":null,"metadata":{},"sourceType":"module"}